Index: gtkentry.c
===================================================================
RCS file: /cvs/gnome/gtk+/gtk/gtkentry.c,v
retrieving revision 1.214.2.2
diff -u -p -r1.214.2.2 gtkentry.c
--- gtkentry.c	28 Feb 2003 02:03:49 -0000	1.214.2.2
+++ gtkentry.c	18 Apr 2003 15:52:47 -0000
@@ -47,6 +47,8 @@
 #include "gtkstock.h"
 #include "gtktextutil.h"
 #include "gtkwindow.h"
+#include "gtktogglebutton.h"
+#include "gtkarrow.h"
 
 #define MIN_ENTRY_WIDTH  150
 #define DRAW_TIMEOUT     20
@@ -131,6 +133,10 @@ static gint   gtk_entry_button_press    
 					      GdkEventButton   *event);
 static gint   gtk_entry_button_release       (GtkWidget        *widget,
 					      GdkEventButton   *event);
+static gint   gtk_entry_enter_notify         (GtkWidget        *widget,
+                                              GdkEventCrossing *event);
+static gint   gtk_entry_leave_notify         (GtkWidget        *widget,
+                                              GdkEventCrossing *event);
 static gint   gtk_entry_motion_notify        (GtkWidget        *widget,
 					      GdkEventMotion   *event);
 static gint   gtk_entry_key_press            (GtkWidget        *widget,
@@ -296,6 +302,11 @@ static void         gtk_entry_state_chan
 							GtkStateType    previous_state);
 static void         gtk_entry_check_cursor_blink       (GtkEntry       *entry);
 static void         gtk_entry_pend_cursor_blink        (GtkEntry       *entry);
+static void         get_button_window_size             (GtkEntry       *entry,
+                                                        gint           *x,
+                                                        gint           *y,
+                                                        gint           *width,
+                                                        gint           *height);
 static void         get_text_area_size                 (GtkEntry       *entry,
 							gint           *x,
 							gint           *y,
@@ -401,6 +412,8 @@ gtk_entry_class_init (GtkEntryClass *cla
   widget_class->expose_event = gtk_entry_expose;
   widget_class->button_press_event = gtk_entry_button_press;
   widget_class->button_release_event = gtk_entry_button_release;
+  widget_class->enter_notify_event = gtk_entry_enter_notify;
+  widget_class->leave_notify_event = gtk_entry_leave_notify;
   widget_class->motion_notify_event = gtk_entry_motion_notify;
   widget_class->key_press_event = gtk_entry_key_press;
   widget_class->key_release_event = gtk_entry_key_release;
@@ -926,6 +939,8 @@ gtk_entry_init (GtkEntry *entry)
 		    G_CALLBACK (gtk_entry_retrieve_surrounding_cb), entry);
   g_signal_connect (entry->im_context, "delete_surrounding",
 		    G_CALLBACK (gtk_entry_delete_surrounding_cb), entry);
+
+  entry->popdown_button = NULL;
 }
 
 static void
@@ -1004,6 +1019,31 @@ gtk_entry_realize (GtkWidget *widget)
 
   gdk_window_show (entry->text_area);
 
+  if (entry->popdown_button)
+    {
+      GtkAllocation alloc;
+
+      get_button_window_size (entry, &attributes.x, &attributes.y, &attributes.width, &attributes.height);
+
+      attributes_mask &= ~GDK_WA_CURSOR;
+
+      entry->popdown_window = gdk_window_new (widget->window, &attributes, attributes_mask);
+      gdk_window_set_user_data (entry->popdown_window, entry);
+
+      gdk_window_show (entry->popdown_window);
+
+      gtk_widget_set_parent_window (entry->popdown_button, entry->popdown_window);
+      gtk_widget_set_parent (entry->popdown_button, GTK_WIDGET (entry)->parent);
+      gtk_widget_show_all (entry->popdown_button);
+
+      alloc.x = 0;
+      alloc.y = 0;
+      alloc.width = attributes.width;
+      alloc.height = attributes.height;
+
+      gtk_widget_size_allocate (entry->popdown_button, &alloc);
+    }
+
   gtk_im_context_set_client_window (entry->im_context, entry->text_area);
 
   gtk_entry_adjust_scroll (entry);
@@ -1037,6 +1077,13 @@ gtk_entry_unrealize (GtkWidget *widget)
       entry->popup_menu = NULL;
     }
 
+  if (entry->popdown_window)
+    {
+      gdk_window_set_user_data (entry->popdown_window, NULL);
+      gdk_window_destroy (entry->popdown_window);
+      entry->popdown_window = NULL;
+    }
+
   if (GTK_WIDGET_CLASS (parent_class)->unrealize)
     (* GTK_WIDGET_CLASS (parent_class)->unrealize) (widget);
 }
@@ -1106,6 +1153,43 @@ gtk_entry_size_request (GtkWidget      *
   requisition->height = PANGO_PIXELS (entry->ascent + entry->descent) + yborder * 2;
 
   pango_font_metrics_unref (metrics);
+
+  if (entry->popdown_button)
+    {
+      GtkRequisition req;
+
+      gtk_widget_size_request (entry->popdown_button, &req);
+
+      requisition->height = MAX (requisition->height, req.height);
+      requisition->width = requisition->width + requisition->height;
+    }
+}
+static void
+get_button_window_size (GtkEntry *entry,
+                        gint     *x,
+                        gint     *y,
+                        gint     *width,
+                        gint     *height)
+{
+  gint xborder, yborder;
+  GtkWidget *widget = GTK_WIDGET (entry);
+  GtkRequisition req;
+
+  gtk_widget_get_child_requisition (widget, &req);
+
+  get_borders (entry, &xborder, &yborder);
+
+  if (x)
+    *x = widget->allocation.width - req.height;
+
+  if (y)
+    *y = 0;
+
+  if (width)
+    *width = req.height;
+
+  if (height)
+    *height = req.height;
 }
 
 static void
@@ -1130,7 +1214,11 @@ get_text_area_size (GtkEntry *entry,
     *y = yborder;
   
   if (width)
-    *width = GTK_WIDGET (entry)->allocation.width - xborder * 2;
+    {
+      *width = widget->allocation.width - xborder * 2;
+      if (entry->popdown_button)
+        *width -= requisition.height;
+    }
 
   if (height)
     *height = requisition.height - yborder * 2;
@@ -1144,10 +1232,14 @@ get_widget_window_size (GtkEntry *entry,
                         gint     *height)
 {
   GtkRequisition requisition;
+  GtkRequisition but_req = {0,};
   GtkWidget *widget = GTK_WIDGET (entry);
       
   gtk_widget_get_child_requisition (widget, &requisition);
 
+  if (entry->popdown_button)
+    gtk_widget_size_request (entry->popdown_button, &but_req);
+
   if (x)
     *x = widget->allocation.x;
 
@@ -1168,6 +1260,8 @@ get_widget_window_size (GtkEntry *entry,
 	*height = widget->allocation.height;
       else
 	*height = requisition.height;
+
+      *height = MAX (*height, but_req.height);
     }
 }
 
@@ -1188,15 +1282,32 @@ gtk_entry_size_allocate (GtkWidget     *
       gint x, y, width, height;
 
       get_widget_window_size (entry, &x, &y, &width, &height);
-      
+
       gdk_window_move_resize (widget->window,
-                              x, y, width, height);   
+                              x, y, width, height);
 
       get_text_area_size (entry, &x, &y, &width, &height);
-      
+
       gdk_window_move_resize (entry->text_area,
                               x, y, width, height);
 
+      if (entry->popdown_button)
+        {
+          GtkAllocation alloc;
+
+          get_button_window_size (entry, &x, &y, &width, &height);
+
+          gdk_window_move_resize (entry->popdown_window,
+                                  x, y, width, height);
+
+          alloc.x = 0;
+          alloc.y = 0;
+          alloc.width = width;
+          alloc.height = height;
+
+          gtk_widget_size_allocate (entry->popdown_button, &alloc);
+        }
+
       gtk_entry_recompute (entry);
     }
 }
@@ -1224,6 +1335,9 @@ gtk_entry_draw_frame (GtkWidget *widget)
       height -= 2 * focus_width;
     }
 
+  if (GTK_ENTRY (widget)->popdown_button)
+    width -= height;
+
   gtk_paint_shadow (widget->style, widget->window,
 		    GTK_STATE_NORMAL, GTK_SHADOW_IN,
 		    NULL, widget, "entry",
@@ -1271,6 +1385,10 @@ gtk_entry_expose (GtkWidget      *widget
       
       gtk_entry_draw_text (GTK_ENTRY (widget));
     }
+  else if (event->window == entry->popdown_window)
+    {
+      (* GTK_WIDGET_GET_CLASS (entry->popdown_button)->expose_event) (entry->popdown_button, event);
+    }
 
   return FALSE;
 }
@@ -1284,6 +1402,11 @@ gtk_entry_button_press (GtkWidget      *
   gint tmp_pos;
   gint sel_start, sel_end;
 
+  if (event->window == entry->popdown_window)
+    {
+      return (* GTK_WIDGET_GET_CLASS (entry->popdown_button)->button_press_event) (entry->popdown_button, event);
+    }
+
   if (event->window != entry->text_area ||
       (entry->button && event->button != entry->button))
     return FALSE;
@@ -1424,6 +1547,11 @@ gtk_entry_button_release (GtkWidget     
 {
   GtkEntry *entry = GTK_ENTRY (widget);
 
+  if (event->window == entry->popdown_window)
+    {
+      return (* GTK_WIDGET_GET_CLASS (entry->popdown_button)->button_release_event) (entry->popdown_button, event);
+    }
+
   if (event->window != entry->text_area || entry->button != event->button)
     return FALSE;
 
@@ -1444,6 +1572,30 @@ gtk_entry_button_release (GtkWidget     
 }
 
 static gint
+gtk_entry_enter_notify (GtkWidget        *widget,
+                        GdkEventCrossing *event)
+{
+  GtkEntry *entry = GTK_ENTRY (widget);
+
+  if (event->window != entry->popdown_window)
+    return FALSE;
+
+  return (* GTK_WIDGET_GET_CLASS (entry->popdown_button)->enter_notify_event) (entry->popdown_button, event);
+}
+
+static gint
+gtk_entry_leave_notify (GtkWidget        *widget,
+                        GdkEventCrossing *event)
+{
+  GtkEntry *entry = GTK_ENTRY (widget);
+
+  if (event->window != entry->popdown_window)
+    return FALSE;
+
+  return (* GTK_WIDGET_GET_CLASS (entry->popdown_button)->leave_notify_event) (entry->popdown_button, event);
+}
+
+static gint
 gtk_entry_motion_notify (GtkWidget      *widget,
 			 GdkEventMotion *event)
 {
@@ -3847,6 +3999,19 @@ gtk_entry_get_layout_offsets (GtkEntry *
 
   if (y)
     *y += text_area_y;
+}
+
+void
+gtk_entry_enable_popdown_button (GtkEntry *entry)
+{
+  g_return_if_fail (GTK_IS_ENTRY (entry));
+
+  if (entry->popdown_button)
+    return;
+
+  entry->popdown_button = gtk_toggle_button_new ();
+  gtk_container_add (GTK_CONTAINER (entry->popdown_button),
+                     gtk_arrow_new (GTK_ARROW_DOWN, GTK_SHADOW_NONE));
 }
 
 /* Quick hack of a popup menu
Index: gtkentry.h
===================================================================
RCS file: /cvs/gnome/gtk+/gtk/gtkentry.h,v
retrieving revision 1.56
diff -u -p -r1.56 gtkentry.h
--- gtkentry.h	9 Oct 2002 22:25:17 -0000	1.56
+++ gtkentry.h	18 Apr 2003 15:52:47 -0000
@@ -68,6 +68,9 @@ struct _GtkEntry
   GdkWindow *text_area;
   GtkIMContext *im_context;
   GtkWidget   *popup_menu;
+
+  GdkWindow *popdown_window;
+  GtkWidget *popdown_button;
   
   gint         current_pos;
   gint         selection_bound;
@@ -179,6 +182,8 @@ PangoLayout* gtk_entry_get_layout       
 void         gtk_entry_get_layout_offsets       (GtkEntry      *entry,
                                                  gint          *x,
                                                  gint          *y);
+
+void         gtk_entry_enable_popdown_button    (GtkEntry      *entry);
 
 /* Deprecated compatibility functions
  */
