Highlevel API:
* Add a way to make the cairo printing callbacks (optionally) happen in a thread
* Add API to EggPrintOperation to handle job status feedback while printing.
  Needs something like "job_status_changed" and "job_finished" signals
* Add API to allow the app to add a custom tab with gtk+ widgets to the
  print dialog. We can hopefully implement this on osx & win32.

Lowlevel API:
* Figure out the best way to configure module loading (textfile, gtkrc or 
  just frob the modules directory)
* Make sure to hook up to GtkModule for finding modules when we move to gtk

Cups/Unix:
* Add custom translations for a lot of standard PPD options
* Hook up the settings in the "Job" tab
* Figure out the details in handling page size, orientation and margins
* General UI review and polish
* fix UI padding according to HIG
* Hide tabs if there is no printers (none selected)
* Make print button insensitive if no printer selected

PDF backend:
* Change to using a GtkFileChooserEntry to get file names when we move to 
  GTK.  It is a private object in GTK right now.

Win32:
* Use threads for the dialog, to allow repaints of other windows while they are up

print dialog:
* Make sure we handle margins/orientation/paper size correctly
* Finish the various manual_* stuff
* job page print at support
* Add nicer scaling to print dialog (scale to fit page size)
* Use themed icons
* HIG spacing
* More ppd string translations
* Don't select default for a short while, so that we can avoid flashing if the selected printer appears
* Actually get default printer from somewhere

General:
* print preview?
* should base64 move to glib ?

page setting dialog:
* land/port icons
* HIG spacing

* sort paper lists
* nicer unit editor than spinbutton

code:
remove initial _ for static funcs
s/impl/dialog/
